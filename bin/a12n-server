#!/usr/bin/env node

/* eslint "@typescript-eslint/no-var-requires": 0 */
import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';
import dotenv from 'dotenv';
import { generateKeyPairSync } from 'node:crypto';

dotenv.config();

if (!isConfigured()) {
  console.info('a12nserver not configured! Writing default configuration to ".env"');
  let dotEnvSource = fs.readFileSync(
    path.join(path.dirname(fileURLToPath(import.meta.url)) + '/../.env.defaults'),
    'utf-8'
  );

  console.info('Generating a private key for JWT');
  const privateKey = generatePrivateKey();

  dotEnvSource = dotEnvSource.replace(/#\sJWT_PRIVATE_KEY=.*/, `JWT_PRIVATE_KEY="${privateKey}"`);

  fs.writeFileSync('.env', dotEnvSource);

  // Reloading .env
  dotenv.config();

}

await import('../dist/app.js');

function isConfigured() {

  // A very simple heuristic to see if configuration exists.
  return process.env.MYSQL_HOST !== undefined || process.env.DB_DRIVER !== undefined || fs.existsSync('.env');

}

function generatePrivateKey() {

  const { privateKey } = generateKeyPairSync('rsa', {
    modulusLength: 4096,
    privateKeyEncoding: {
      type: 'pkcs8',
      format: 'pem'
    }
  });
  return privateKey;

}
